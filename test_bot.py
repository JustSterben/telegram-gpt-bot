import os
import json
import requests
import asyncio
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# üîπ API-–∫–ª—é—á–∏ –∏ –¥–∞–Ω–Ω—ã–µ
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

# üîπ SIPNET –î–ê–ù–ù–´–ï
SIPNET_LOGIN = os.getenv("SIPNET_LOGIN")
SIPNET_PASSWORD = os.getenv("SIPNET_PASSWORD")
SHLAGBAUM_NUMBER = os.getenv("SHLAGBAUM_NUMBER")

# üîπ ID –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
GROUP_CHAT_ID = -1002461315654

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([OPENAI_API_KEY, TELEGRAM_BOT_TOKEN, GOOGLE_CREDENTIALS_JSON, SIPNET_LOGIN, SIPNET_PASSWORD, SHLAGBAUM_NUMBER]):
    print("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# üîπ –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
try:
    creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
    SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
    gc = gspread.authorize(creds)

    # üîπ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1gVa34e1k0wpjantVq91IQV7TxMDrZiZpSKWrz8IBpmo/edit?gid=0"
    spreadsheet = gc.open_by_url(SPREADSHEET_URL)
    sheet = spreadsheet.sheet1  # –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    exit(1)

# üîπ –•—Ä–∞–Ω–∏–º ID –∑–≤–æ–Ω–∫–∞ –¥–ª—è SIPNET
REGISTERED_PHONE_ID = None

# üîπ –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –≤ SIPNET
def register_phone():
    global REGISTERED_PHONE_ID
    url = "https://newapi.sipnet.ru/api.php"
    headers = {"Content-Type": "application/json"}
    params = {
        "operation": "registerphone1",
        "sipuid": SIPNET_LOGIN,
        "password": SIPNET_PASSWORD,
        "Phone": SHLAGBAUM_NUMBER,
        "format": "json"
    }

    try:
        response = requests.post(url, headers=headers, json=params)
        data = response.json()
        print(f"üîπ –û—Ç–≤–µ—Ç SIPNET (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞): {data}")

        if "id" in data:
            REGISTERED_PHONE_ID = data["id"]
            print(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! ID: {REGISTERED_PHONE_ID}")
            return REGISTERED_PHONE_ID
        else:
            error_message = data.get("errorMessage", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞): {error_message}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        return None

# üîπ –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ —à–ª–∞–≥–±–∞—É–º–∞
def call_gate():
    global REGISTERED_PHONE_ID
    if not REGISTERED_PHONE_ID:
        REGISTERED_PHONE_ID = register_phone()
        if not REGISTERED_PHONE_ID:
            return "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ SIPNET."

    url = "https://newapi.sipnet.ru/api.php"
    headers = {"Content-Type": "application/json"}
    params = {
        "operation": "genCall",
        "id": REGISTERED_PHONE_ID,
        "DstPhone": SHLAGBAUM_NUMBER,
        "format": "json"
    }

    try:
        response = requests.post(url, headers=headers, json=params)
        data = response.json()
        print(f"üîπ –û—Ç–≤–µ—Ç SIPNET (–≤—ã–∑–æ–≤ —à–ª–∞–≥–±–∞—É–º–∞): {data}")

        if data.get("status") == "success":
            call_id = data.get("id", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            print(f"‚úÖ –í—ã–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID –∑–≤–æ–Ω–∫–∞: {call_id}")
            return f"‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–∞ —à–ª–∞–≥–±–∞—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! (ID: {call_id})"
        else:
            error_message = data.get("errorMessage", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET: {error_message}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET: {error_message}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /open_gate
@dp.message(Command("open_gate"))
async def open_gate_command(message: types.Message):
    user_id = message.from_user.id
    print(f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞")

    response = call_gate()
    await message.answer(response)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_call
@dp.message(Command("check_call"))
async def check_call_command(message: types.Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /check_call <ID –∑–≤–æ–Ω–∫–∞>")
        return

    call_id = args[1]
    url = "https://newapi.sipnet.ru/api.php"
    headers = {"Content-Type": "application/json"}
    params = {
        "operation": "calls2",
        "sipuid": SIPNET_LOGIN,
        "password": SIPNET_PASSWORD,
        "id": call_id,
        "format": "json"
    }

    try:
        response = requests.post(url, headers=headers, json=params)
        data = response.json()
        print(f"üîπ –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–∞ (ID {call_id}): {data}")

        if "calls" in data and data["calls"]:
            await message.answer(f"‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω! –î–∞–Ω–Ω—ã–µ: {json.dumps(data['calls'], indent=2, ensure_ascii=False)}")
        else:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET: {data.get('errorMessage', '–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
