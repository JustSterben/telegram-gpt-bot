import os
import asyncio
import gspread
from openai import OpenAI
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# ID –≥—Ä—É–ø–ø—ã –≤ Telegram, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤
GROUP_CHAT_ID = -4704353814

# –°—Å—ã–ª–∫–∞ –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É
GOOGLE_SHEET_URL = "https://docs.google.com/spreadsheets/d/1gVa34e1k0wpjantVq91IQV7TxMDrZiZpSKWrz8IBpmo/edit?gid=0"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
if not OPENAI_API_KEY or not TELEGRAM_BOT_TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ API.")
    exit(1)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ
gc = gspread.service_account(filename="credentials.json")  # –§–∞–π–ª —Å –∫–ª—é—á–∞–º–∏ Google API
spreadsheet = gc.open_by_url(GOOGLE_SHEET_URL)
sheet = spreadsheet.sheet1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def load_faq():
    data = sheet.get_all_records()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    faq_dict = {}
    for row in data:
        question = row.get("–í–æ–ø—Ä–æ—Å", "").strip().lower()
        answer = row.get("–û—Ç–≤–µ—Ç", "").strip()
        if question and answer:
            faq_dict[question] = answer
    return faq_dict

FAQ = load_faq()

# –§—É–Ω–∫—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å ChatGPT –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async def process_question_with_gpt(user_text):
    client = OpenAI(api_key=OPENAI_API_KEY)
    prompt = f"""
    –¢—ã –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–º—É, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ—á—å –≥–æ—Å—Ç—è–º —Å –∏—Ö –≤–æ–ø—Ä–æ—Å–∞–º–∏.
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è –¥–æ–º–∞, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç —Å—Ä–µ–¥–∏ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:

    {', '.join(FAQ.keys())}

    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –¥–æ–º–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ –ø–æ–ª–∏—Ç–∏–∫—É, –ø–æ–≥–æ–¥—É, –∫–æ—Å–º–æ—Å), —Å–∫–∞–∂–∏: 
    '–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–º—É. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?'

    –í–æ–ø—Ä–æ—Å –≥–æ—Å—Ç—è: {user_text}
    """
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip().lower()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram-–≥—Ä—É–ø–ø—É
async def send_to_group(question, user_id):
    message_text = f"üì© <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –≥–æ—Å—Ç—è:</b>\n‚ùì {question}\n\nüëâ <i>–û—Ç–≤–µ—Ç—å—Ç–µ –µ–º—É –≤ —á–∞—Ç–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ, —á—Ç–æ–±—ã —è –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</i>"
    await bot.send_message(GROUP_CHAT_ID, message_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–º—É. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    user_text = message.text.strip().lower()

    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ GPT, —á—Ç–æ–±—ã –æ–Ω –ø–æ–Ω—è–ª –µ–≥–æ —Å–º—ã—Å–ª
    matched_question = await process_question_with_gpt(user_text)

    # –ï—Å–ª–∏ GPT —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞—à—ë–ª –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ FAQ, –¥–∞—ë–º –æ—Ç–≤–µ—Ç
    if matched_question in FAQ:
        await message.answer(FAQ[matched_question])
    elif "—è –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–º—É" in matched_question:
        await message.answer("–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–º—É. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
    else:
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ –º–æ–≥—É —É—Ç–æ—á–Ω–∏—Ç—å —É —Ö–æ–∑—è–∏–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
        await send_to_group(user_text, message.from_user.id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –≥—Ä—É–ø–ø—É

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
