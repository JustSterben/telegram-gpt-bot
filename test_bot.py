import os
import json
import asyncio
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI
from dotenv import load_dotenv
from difflib import get_close_matches

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS")

# ID –≥—Ä—É–ø–ø—ã –≤ Telegram, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤
GROUP_CHAT_ID = -4704353814

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã
if not OPENAI_API_KEY or not TELEGRAM_BOT_TOKEN or not GOOGLE_CREDENTIALS_JSON:
    print("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ API –∏–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google.")
    exit(1)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google –¢–∞–±–ª–∏—Ü–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)

# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ OAuth-—Å–∫–æ–ø—ã
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)

# –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Google Sheets
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º Google –¢–∞–±–ª–∏—Ü—É
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1gVa34e1k0wpjantVq91IQV7TxMDrZiZpSKWrz8IBpmo/edit?gid=0"
spreadsheet = gc.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.sheet1  # –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
def load_faq():
    data = sheet.get_all_records()
    print("üì• –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets:", data)  

    if not data:
        print("‚ùå –û—à–∏–±–∫–∞: Google Sheets –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è")
        return {}

    # –û—á–∏—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç —Å–∫—Ä—ã—Ç—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    headers = {key.strip().replace("\t", "").replace("\n", ""): key for key in data[0].keys()}
    print("üîç –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Ç–∞–±–ª–∏—Ü—ã:", headers)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–∏
    question_key = next((key for key in headers if "–≤–æ–ø—Ä–æ—Å" in key.lower()), None)
    answer_key = next((key for key in headers if "–æ—Ç–≤–µ—Ç" in key.lower()), None)

    if not question_key or not answer_key:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã '–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å' –∏–ª–∏ '–û—Ç–≤–µ—Ç'")
        return {}

    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å FAQ
    faq_dict = {}
    for row in data:
        question = row.get(question_key, "").strip().lower()
        answer = row.get(answer_key, "").strip()
        if question and answer:
            faq_dict[question] = answer

    print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:", list(faq_dict.keys()))
    return faq_dict

FAQ = load_faq()

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ ChatGPT –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
async def process_question_with_gpt(user_text):
    client = OpenAI(api_key=OPENAI_API_KEY)
    prompt = f"""
    –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ –¥–æ–º–∞. –ì–æ—Å—Ç–∏ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ–º–µ, —É–¥–æ–±—Å—Ç–≤–∞—Ö, —Ç–µ—Ö–Ω–∏–∫–µ.
    –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã:

    {', '.join(FAQ.keys())}

    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, –Ω–∞–ø–∏—à–∏ —Ç–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å".

    –í–æ–ø—Ä–æ—Å –≥–æ—Å—Ç—è: {user_text}
    """
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip().lower()

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ Telegram-–≥—Ä—É–ø–ø—É
async def send_to_group(question, user_id):
    message_text = f"üì© <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –≥–æ—Å—Ç—è:</b>\n‚ùì {question}\n\nüëâ <i>–û—Ç–≤–µ—Ç—å—Ç–µ –µ–º—É –≤ —á–∞—Ç–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ, —á—Ç–æ–±—ã —è –ø–µ—Ä–µ–¥–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.</i>"
    await bot.send_message(GROUP_CHAT_ID, message_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–º—É. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: Message):
    user_text = message.text.strip().lower()
    print(f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ GPT, —á—Ç–æ–±—ã –æ–Ω –ø–æ–Ω—è–ª –µ–≥–æ —Å–º—ã—Å–ª
    matched_question = await process_question_with_gpt(user_text)

    # –ï—Å–ª–∏ GPT —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞—à—ë–ª –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ FAQ, –¥–∞—ë–º –æ—Ç–≤–µ—Ç
    if matched_question in FAQ:
        print(f"‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: '{matched_question}' ‚Üí –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç")
        await message.answer(FAQ[matched_question])
    elif "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å" in matched_question:
        print(f"‚ùå GPT –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–æ–ø—Ä–æ—Å: '{user_text}' ‚Üí –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram-–≥—Ä—É–ø–ø—É")
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ –º–æ–≥—É —É—Ç–æ—á–Ω–∏—Ç—å —É —Ö–æ–∑—è–∏–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
        await send_to_group(user_text, message.from_user.id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ Telegram-–≥—Ä—É–ø–ø—É
    else:
        print(f"‚ùå GPT –ø—Ä–µ–¥–ª–æ–∂–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: '{matched_question}' ‚Üí –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram-–≥—Ä—É–ø–ø—É")
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ –º–æ–≥—É —É—Ç–æ—á–Ω–∏—Ç—å —É —Ö–æ–∑—è–∏–Ω–∞.")
        await send_to_group(user_text, message.from_user.id)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
