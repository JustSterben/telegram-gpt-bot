import os
import json
import requests
import asyncio
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# API-–∫–ª—é—á–∏ –∏ –¥–∞–Ω–Ω—ã–µ
SIPNET_LOGIN = os.getenv("SIPNET_LOGIN")  # –õ–æ–≥–∏–Ω SIPNET
SIPNET_PASSWORD = os.getenv("SIPNET_PASSWORD")  # –ü–∞—Ä–æ–ª—å SIPNET
SHLAGBAUM_NUMBER = os.getenv("SHLAGBAUM_NUMBER")  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —à–ª–∞–≥–±–∞—É–º–∞
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")  # –î–∞–Ω–Ω—ã–µ Google
GROUP_CHAT_ID = os.getenv("GROUP_CHAT_ID")  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not all([SIPNET_LOGIN, SIPNET_PASSWORD, SHLAGBAUM_NUMBER, BOT_TOKEN, GOOGLE_CREDENTIALS_JSON]):
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º Google –¢–∞–±–ª–∏—Ü—É
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1gVa34e1k0wpjantVq91IQV7TxMDrZiZpSKWrz8IBpmo/edit?gid=0"
spreadsheet = gc.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.sheet1  # –ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
def load_faq():
    try:
        data = sheet.get_all_records()
        print("üì• –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data)

        if not data:
            print("‚ùå –û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è!")
            return {}

        faq_dict = {row["–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å"].strip().lower(): row["–û—Ç–≤–µ—Ç"].strip() for row in data if row["–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å"] and row["–û—Ç–≤–µ—Ç"]}
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(faq_dict)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
        return faq_dict
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ: {e}")
        return {}

FAQ = load_faq()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram
@dp.message()
async def handle_message(message: types.Message):
    user_text = message.text.strip().lower() if message.text else None

    if not user_text:
        return

    user_id = message.from_user.id
    print(f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID {user_id}): {user_text}")

    if user_text in FAQ:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç: {FAQ[user_text]}")
        await message.answer(FAQ[user_text])
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: '{user_text}', –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É")
        sent_message = await bot.send_message(
            GROUP_CHAT_ID,
            f"üì© <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –≥–æ—Å—Ç—è:</b>\n‚ùì {user_text}\nüë§ <b>ID –≥–æ—Å—Ç—è:</b> {user_id}",
            parse_mode="HTML"
        )
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ —É—Ç–æ—á–Ω—é –∏ —Å–æ–æ–±—â—É —Ç–µ–±–µ!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ SIPNET
def call_gate():
    url = "https://www.sipnet.ru/api/callback.php"  # –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL
    params = {
        "operation": "genCall",
        "sipuid": SIPNET_LOGIN,
        "password": SIPNET_PASSWORD,
        "DstPhone": SHLAGBAUM_NUMBER,
        "format": "json",
        "lang": "ru"
    }

    try:
        response = requests.get(url, params=params)

        if response.status_code != 200:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET: –ö–æ–¥ {response.status_code}"

        try:
            data = response.json()
        except json.JSONDecodeError:
            return "‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç SIPNET"

        if "id" in data:
            return "‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–∞ —à–ª–∞–≥–±–∞—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
        else:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —à–ª–∞–≥–±–∞—É–º–∞
@dp.message(Command("open_gate"))
async def open_gate_command(message: types.Message):
    user_id = message.from_user.id
    print(f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞")

    response = call_gate()
    await message.answer(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
