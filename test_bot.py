import os
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# API-–∫–ª—é—á–∏ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è SIPNET
SIPNET_LOGIN = os.getenv("SIPNET_LOGIN")  # –õ–æ–≥–∏–Ω SIPNET
SIPNET_PASSWORD = os.getenv("SIPNET_PASSWORD")  # –ü–∞—Ä–æ–ª—å SIPNET
SHLAGBAUM_NUMBER = os.getenv("SHLAGBAUM_NUMBER")  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —à–ª–∞–≥–±–∞—É–º–∞
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not all([SIPNET_LOGIN, SIPNET_PASSWORD, SHLAGBAUM_NUMBER, BOT_TOKEN]):
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã!")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ SIPNET
def call_gate():
    url = "https://www.sipnet.ru/api/callback.php"  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —ç—Ç–æ—Ç URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    params = {
        "operation": "genCall",
        "sipuid": SIPNET_LOGIN,
        "password": SIPNET_PASSWORD,
        "DstPhone": SHLAGBAUM_NUMBER,  # –ù–æ–º–µ—Ä —à–ª–∞–≥–±–∞—É–º–∞
        "format": "json",
        "lang": "ru"
    }

    try:
        response = requests.get(url, params=params)
        data = response.json()

        if "id" in data:
            return "‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–∞ —à–ª–∞–≥–±–∞—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
        else:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –æ—Ç–∫—Ä—ã—Ç—å —à–ª–∞–≥–±–∞—É–º. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /open_gate üö™")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /open_gate
@dp.message(Command("open_gate"))
async def open_gate_command(message: types.Message):
    user_id = message.from_user.id
    print(f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞")

    # –°–æ–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ SIPNET
    response = call_gate()
    await message.answer(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
