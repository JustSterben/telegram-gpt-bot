import os
import json
import asyncio
import requests
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# API-–∫–ª—é—á–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS")
SIPNET_LOGIN = os.getenv("SIPNET_LOGIN")
SIPNET_PASSWORD = os.getenv("SIPNET_PASSWORD")
SHLAGBAUM_NUMBER = os.getenv("SHLAGBAUM_NUMBER")

# ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
GROUP_CHAT_ID = -1002461315654

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not all([OPENAI_API_KEY, TELEGRAM_BOT_TOKEN, GOOGLE_CREDENTIALS_JSON, SIPNET_LOGIN, SIPNET_PASSWORD, SHLAGBAUM_NUMBER]):
    print("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º Google –¢–∞–±–ª–∏—Ü—É
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1gVa34e1k0wpjantVq91IQV7TxMDrZiZpSKWrz8IBpmo/edit?gid=0"
spreadsheet = gc.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.sheet1  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

# –•—Ä–∞–Ω–∏–º, –∫—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å (—Ñ–æ—Ä–º–∞—Ç: {ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: ID –≥–æ—Å—Ç—è})
pending_questions = {}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ FAQ –∏–∑ Google Sheets
def load_faq():
    try:
        data = sheet.get_all_records()
        print("üì• –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data)

        if not data:
            print("‚ùå –û—à–∏–±–∫–∞: Google Sheets –ø—É—Å—Ç–∞—è!")
            return {}

        headers = {key.strip().replace("\t", "").replace("\n", ""): key for key in data[0].keys()}
        question_key = next((key for key in headers if "–≤–æ–ø—Ä–æ—Å" in key.lower()), None)
        answer_key = next((key for key in headers if "–æ—Ç–≤–µ—Ç" in key.lower()), None)

        if not question_key or not answer_key:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ '–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å' –∏–ª–∏ '–û—Ç–≤–µ—Ç' –≤ —Ç–∞–±–ª–∏—Ü–µ!")
            return {}

        faq_dict = {}
        for row in data:
            question = row.get(question_key, "").strip().lower()
            answer = row.get(answer_key, "").strip()
            if question and answer:
                faq_dict[question] = answer

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(faq_dict)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
        return faq_dict

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ: {e}")
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ
FAQ = load_faq()
if not FAQ:
    print("‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: FAQ –ø—É—Å—Ç! –ë–æ—Ç –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")

# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ SIPNET API –¥–ª—è –∑–≤–æ–Ω–∫–∞ –Ω–∞ —à–ª–∞–≥–±–∞—É–º
def call_gate():
    url = "https://www.sipnet.ru/api/call"
    params = {
        "operation": "genCall",
        "sipuid": SIPNET_LOGIN,
        "password": SIPNET_PASSWORD,
        "DstPhone": SHLAGBAUM_NUMBER,
        "format": "json"
    }

    try:
        response = requests.get(url, params=params)
        data = response.json()

        if "id" in data:
            return "‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–∞ —à–ª–∞–≥–±–∞—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
        else:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ–º–µ –∏ –æ—Ç–∫—Ä—ã—Ç—å —à–ª–∞–≥–±–∞—É–º. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /open_gate üö™")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /open_gate
@dp.message(Command("open_gate"))
async def open_gate_command(message: types.Message):
    user_id = message.from_user.id
    print(f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞")

    # –°–æ–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ —á–µ—Ä–µ–∑ SIPNET
    response = call_gate()
    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å—ã –∏–∑ Google Sheets)
@dp.message()
async def handle_message(message: Message):
    user_text = message.text.strip().lower() if message.text else None

    if message.chat.id == GROUP_CHAT_ID:
        if message.reply_to_message:
            await handle_group_reply(message)
        return

    if not user_text:
        return

    user_id = message.from_user.id
    print(f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID {user_id}): {user_text}")

    if user_text in FAQ:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç: '{user_text}'")
        await message.answer(FAQ[user_text])
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: '{user_text}', –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É")

        sent_message = await bot.send_message(
            GROUP_CHAT_ID,
            f"üì© <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –≥–æ—Å—Ç—è:</b>\n‚ùì {user_text}\nüë§ <b>ID –≥–æ—Å—Ç—è:</b> {user_id}\n\n‚úç –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            parse_mode="HTML"
        )

        pending_questions[sent_message.message_id] = user_id
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ –º–æ–≥—É —É—Ç–æ—á–Ω–∏—Ç—å —É —Ö–æ–∑—è–∏–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Å—Ç—é)
async def handle_group_reply(message: Message):
    if message.chat.id != GROUP_CHAT_ID:
        return

    if not message.reply_to_message:
        await message.reply("‚ö† –û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–Ω—è–ª, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
        return

    original_message_id = message.reply_to_message.message_id

    if original_message_id in pending_questions:
        guest_id = pending_questions.pop(original_message_id)
        response_text = message.text.strip()

        await bot.send_message(guest_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{response_text}")
        await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ—Å—Ç—é!")
    else:
        await message.reply("‚ö† –û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–æ—Å—Ç—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
