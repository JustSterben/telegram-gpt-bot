import os
import json
import requests
import asyncio
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# üîπ API-–∫–ª—é—á–∏ –∏ –¥–∞–Ω–Ω—ã–µ
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")

# üîπ SIPNET –î–ê–ù–ù–´–ï
SIPNET_LOGIN = os.getenv("SIPNET_LOGIN")
SIPNET_PASSWORD = os.getenv("SIPNET_PASSWORD")
SHLAGBAUM_NUMBER = os.getenv("SHLAGBAUM_NUMBER")



# üîπ ID –≥—Ä—É–ø–ø—ã –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
GROUP_CHAT_ID = -1002461315654

# üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã
if not all([OPENAI_API_KEY, TELEGRAM_BOT_TOKEN, GOOGLE_CREDENTIALS_JSON, SIPNET_LOGIN, SIPNET_PASSWORD, SHLAGBAUM_NUMBER]):
    print("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# üîπ –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets
try:
    creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
    SCOPES = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
    gc = gspread.authorize(creds)

    # üîπ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1gVa34e1k0wpjantVq91IQV7TxMDrZiZpSKWrz8IBpmo/edit?gid=0"
    spreadsheet = gc.open_by_url(SPREADSHEET_URL)
    sheet = spreadsheet.sheet1  # –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google Sheets!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    exit(1)

# üîπ –•—Ä–∞–Ω–∏–º, –∫—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å (—Ñ–æ—Ä–º–∞—Ç: {ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: ID –≥–æ—Å—Ç—è})
pending_questions = {}

# üîπ –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ Google Sheets
def load_faq():
    try:
        data = sheet.get_all_records()
        print("üì• –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data)

        if not data:
            print("‚ùå –û—à–∏–±–∫–∞: Google Sheets –ø—É—Å—Ç–∞—è!")
            return {}

        headers = {key.strip(): key for key in data[0].keys()}
        question_key = next((key for key in headers if "–≤–æ–ø—Ä–æ—Å" in key.lower()), None)
        answer_key = next((key for key in headers if "–æ—Ç–≤–µ—Ç" in key.lower()), None)

        if not question_key or not answer_key:
            print("‚ùå –û—à–∏–±–∫–∞: –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ '–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å' –∏–ª–∏ '–û—Ç–≤–µ—Ç'!")
            return {}

        faq_dict = {row.get(question_key, "").strip().lower(): row.get(answer_key, "").strip() for row in data if row.get(question_key)}
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(faq_dict)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
        return faq_dict
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ: {e}")
        return {}

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ
FAQ = load_faq()

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ GPT
async def process_question_with_gpt(user_text):
    client = OpenAI(api_key=OPENAI_API_KEY)
    prompt = f"""
    –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ –¥–æ–º–∞. –ì–æ—Å—Ç–∏ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ–º–µ, —É–¥–æ–±—Å—Ç–≤–∞—Ö, —Ç–µ—Ö–Ω–∏–∫–µ.
    –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã:
    {', '.join(FAQ.keys())}
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, –Ω–∞–ø–∏—à–∏ —Ç–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å".
    –í–æ–ø—Ä–æ—Å –≥–æ—Å—Ç—è: {user_text}
    """
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip().lower()

import requests
import json

# üîπ –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –≤ SIPNET (–®–∞–≥ 1)
def register_phone():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –≤—ã–∑–æ–≤–∞."""
    url = "https://newapi.sipnet.ru/api.php"
    headers = {"Content-Type": "application/json"}
    params = {
        "operation": "registerphone1",
        "sipuid": SIPNET_LOGIN,   # –õ–æ–≥–∏–Ω –≤ SIPNET
        "password": SIPNET_PASSWORD,  # –ü–∞—Ä–æ–ª—å –≤ SIPNET
        "Phone": SHLAGBAUM_NUMBER,   # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        "format": "json"
    }

    try:
        response = requests.post(url, headers=headers, json=params)
        data = response.json()
        print(f"üîπ –û—Ç–≤–µ—Ç SIPNET (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞): {data}")

        if "id" in data:
            call_id = data["id"]
            print(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! ID: {call_id}")
            return call_id
        else:
            error_message = data.get("errorMessage", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞): {error_message}")
            return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
        return None


# üîπ –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ —à–ª–∞–≥–±–∞—É–º–∞ (–®–∞–≥ 2)
def call_gate(call_id):
    """–í—ã–∑—ã–≤–∞–µ—Ç –∑–≤–æ–Ω–æ–∫ –Ω–∞ —à–ª–∞–≥–±–∞—É–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–ª—É—á–µ–Ω–Ω—ã–π ID."""
    url = "https://newapi.sipnet.ru/api.php"
    headers = {"Content-Type": "application/json"}
    params = {
        "operation": "genCall",
        "id": call_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ
        "DstPhone": SHLAGBAUM_NUMBER,  # –ù–æ–º–µ—Ä —à–ª–∞–≥–±–∞—É–º–∞
        "format": "json"
    }

    try:
        response = requests.post(url, headers=headers, json=params)
        data = response.json()
        print(f"üîπ –û—Ç–≤–µ—Ç SIPNET (–∑–≤–æ–Ω–æ–∫ –Ω–∞ —à–ª–∞–≥–±–∞—É–º): {data}")

        if "id" in data:
            call_id = data["id"]
            print(f"‚úÖ –í—ã–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ID –∑–≤–æ–Ω–∫–∞: {call_id}")
            return f"‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–∞ —à–ª–∞–≥–±–∞—É–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! (ID: {call_id})"
        else:
            error_message = data.get("errorMessage", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET (–∑–≤–æ–Ω–æ–∫): {error_message}")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET: {error_message}"

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"
        
import requests

def check_sipnet_call(call_id):
    url = "https://newapi.sipnet.ru/api.php"  # –ù–æ–≤—ã–π URL API SIPNET
    headers = {"Content-Type": "application/json"}
    params = {
        "operation": "calls2",
        "sipuid": SIPNET_LOGIN,   # –¢–≤–æ–π –ª–æ–≥–∏–Ω –≤ SIPNET
        "password": SIPNET_PASSWORD,  # –¢–≤–æ–π –ø–∞—Ä–æ–ª—å –≤ SIPNET
        "callid": call_id,   # ID –∑–≤–æ–Ω–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        "format": "json"
    }

    try:
        response = requests.post(url, headers=headers, json=params)
        data = response.json()
        print(f"üìû –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–∞ (ID {call_id}): {data}")
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–∞: {e}")
        return None

# üîπ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞ –≤ SIPNET
def check_sipnet_call(call_id):
    url = "https://newapi.sipnet.ru/api.php"
    headers = {"Content-Type": "application/json"}
    params = {
        "operation": "calls2",
        "sipuid": SIPNET_LOGIN,
        "password": SIPNET_PASSWORD,
        "id": call_id,
        "format": "json"
    }

    try:
        response = requests.post(url, headers=headers, json=params)
        data = response.json()
        print(f"üîπ –û—Ç–≤–µ—Ç SIPNET (–∏—Å—Ç–æ—Ä–∏—è –≤—ã–∑–æ–≤–æ–≤): {data}")

        if "calls" in data and data["calls"]:
            return f"‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–∞–π–¥–µ–Ω! –î–∞–Ω–Ω—ã–µ: {data['calls']}"
        else:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ SIPNET: {data.get('errorMessage', '–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω')}"

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /open_gate
@dp.message(Command("open_gate"))
async def open_gate_command(message: types.Message):
    user_id = message.from_user.id
    print(f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞")

    response = call_gate()
    await message.answer(response)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≥–æ—Å—Ç–µ–π
@dp.message()
async def handle_message(message: Message):
    user_text = message.text.strip().lower() if message.text else None

    # üîπ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
    if message.chat.id == GROUP_CHAT_ID:
        if message.reply_to_message:
            await handle_group_reply(message)
        return

    # üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≥–æ—Å—Ç–µ–π
    if not user_text:
        return

    user_id = message.from_user.id
    print(f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID {user_id}): {user_text}")

    matched_question = await process_question_with_gpt(user_text)

    if matched_question in FAQ:
        await message.answer(FAQ[matched_question])
    else:
        sent_message = await bot.send_message(
            GROUP_CHAT_ID,
            f"üì© <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –≥–æ—Å—Ç—è:</b>\n‚ùì {user_text}\nüë§ <b>ID –≥–æ—Å—Ç—è:</b> {user_id}\n\n‚úç –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            parse_mode="HTML"
        )

        pending_questions[sent_message.message_id] = user_id
        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞, –Ω–æ —É—Ç–æ—á–Ω—é —É —Ö–æ–∑—è–∏–Ω–∞.")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
async def handle_group_reply(message: Message):
    if message.chat.id != GROUP_CHAT_ID or not message.reply_to_message:
        return

    original_message_id = message.reply_to_message.message_id
    if original_message_id in pending_questions:
        guest_id = pending_questions.pop(original_message_id)
        await bot.send_message(guest_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{message.text.strip()}")
        await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ—Å—Ç—é!")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_call
@dp.message(Command("check_call"))
async def check_call_command(message: types.Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /check_call <ID –∑–≤–æ–Ω–∫–∞>")
        return

    call_id = args[1]
    response = check_sipnet_call(call_id)

    if response:
        await message.answer(f"üìû –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–∞: {json.dumps(response, indent=2, ensure_ascii=False)}")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ.")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
