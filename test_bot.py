import os
import json
import asyncio
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env (Railway Variables –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ Railway Variables (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ Railway)
GOOGLE_CREDENTIALS_JSON = os.environ.get("GOOGLE_CREDENTIALS")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SIPNET_LOGIN = os.getenv("SIPNET_LOGIN")
SIPNET_PASSWORD = os.getenv("SIPNET_PASSWORD")
SHLAGBAUM_NUMBER = os.getenv("SHLAGBAUM_NUMBER")

# ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
GROUP_CHAT_ID = -1002461315654

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω—ã
if not all([GOOGLE_CREDENTIALS_JSON, OPENAI_API_KEY, TELEGRAM_BOT_TOKEN, SIPNET_LOGIN, SIPNET_PASSWORD, SHLAGBAUM_NUMBER]):
    print("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º Google –¢–∞–±–ª–∏—Ü—É
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1gVa34e1k0wpjantVq91IQV7TxMDrZiZpSKWrz8IBpmo/edit?gid=0"
spreadsheet = gc.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.sheet1

# –•—Ä–∞–Ω–∏–º, –∫—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å (—Ñ–æ—Ä–º–∞—Ç: {ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: ID –≥–æ—Å—Ç—è})
pending_questions = {}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ FAQ –∏–∑ Google Sheets
def load_faq():
    try:
        data = sheet.get_all_records()
        if not data:
            return {}
        
        question_key = next((key for key in data[0].keys() if "–≤–æ–ø—Ä–æ—Å" in key.lower()), None)
        answer_key = next((key for key in data[0].keys() if "–æ—Ç–≤–µ—Ç" in key.lower()), None)
        
        if not question_key or not answer_key:
            return {}
        
        faq_dict = {row.get(question_key, "").strip().lower(): row.get(answer_key, "").strip() for row in data if row.get(question_key)}
        return faq_dict
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ: {e}")
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ
FAQ = load_faq()

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ ChatGPT
async def process_question_with_gpt(user_text):
    client = OpenAI(api_key=OPENAI_API_KEY)
    prompt = f"–í–æ–ø—Ä–æ—Å: {user_text}. –ù–∞–π–¥–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞: {', '.join(FAQ.keys())}"
    response = client.chat.completions.create(model="gpt-4o", messages=[{"role": "user", "content": prompt}])
    return response.choices[0].message.content.strip().lower()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message()
async def handle_message(message: Message):
    user_text = message.text.strip().lower() if message.text else None
    if not user_text:
        return
    user_id = message.from_user.id
    print(f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID {user_id}): {user_text}")

    matched_question = await process_question_with_gpt(user_text)
    if matched_question in FAQ:
        await message.answer(FAQ[matched_question])
    else:
        sent_message = await bot.send_message(GROUP_CHAT_ID, f"üì© –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å: {user_text}\nüë§ ID –≥–æ—Å—Ç—è: {user_id}")
        pending_questions[sent_message.message_id] = user_id
        await message.answer("–Ø —É—Ç–æ—á–Ω—é —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—á—É!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
