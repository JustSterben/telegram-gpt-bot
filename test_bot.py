import os
import json
import asyncio
import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# API-–∫–ª—é—á–∏
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS")

# ID –≥—Ä—É–ø–ø—ã, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!)
GROUP_CHAT_ID = -1002461315654

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not OPENAI_API_KEY or not TELEGRAM_BOT_TOKEN or not GOOGLE_CREDENTIALS_JSON:
    print("‚ùå –û—à–∏–±–∫–∞! –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–ª—é—á–∏ API –∏–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Google.")
    exit(1)

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google –¢–∞–±–ª–∏—Ü–µ
creds_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
SCOPES = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]
creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
gc = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º Google –¢–∞–±–ª–∏—Ü—É
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1gVa34e1k0wpjantVq91IQV7TxMDrZiZpSKWrz8IBpmo/edit?gid=0"
spreadsheet = gc.open_by_url(SPREADSHEET_URL)
sheet = spreadsheet.sheet1  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

# –•—Ä–∞–Ω–∏–º, –∫—Ç–æ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å (—Ñ–æ—Ä–º–∞—Ç: {ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ: ID –≥–æ—Å—Ç—è})
pending_questions = {}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ FAQ –∏–∑ Google Sheets
def load_faq():
    try:
        data = sheet.get_all_records()
        print("üì• –î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", data)

        if not data:
            print("‚ùå –û—à–∏–±–∫–∞: Google Sheets –ø—É—Å—Ç–∞—è!")
            return {}

        headers = {key.strip().replace("\t", "").replace("\n", ""): key for key in data[0].keys()}
        question_key = next((key for key in headers if "–≤–æ–ø—Ä–æ—Å" in key.lower()), None)
        answer_key = next((key for key in headers if "–æ—Ç–≤–µ—Ç" in key.lower()), None)

        if not question_key or not answer_key:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ '–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–ø—Ä–æ—Å' –∏–ª–∏ '–û—Ç–≤–µ—Ç' –≤ —Ç–∞–±–ª–∏—Ü–µ!")
            return {}

        faq_dict = {}
        for row in data:
            question = row.get(question_key, "").strip().lower()
            answer = row.get(answer_key, "").strip()
            if question and answer:
                faq_dict[question] = answer

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(faq_dict)} –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.")
        return faq_dict

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ: {e}")
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º FAQ
FAQ = load_faq()
if not FAQ:
    print("‚ö† –í–Ω–∏–º–∞–Ω–∏–µ: FAQ –ø—É—Å—Ç! –ë–æ—Ç –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ ChatGPT
async def process_question_with_gpt(user_text):
    client = OpenAI(api_key=OPENAI_API_KEY)
    prompt = f"""
    –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–µ–Ω–¥–µ –¥–æ–º–∞. –ì–æ—Å—Ç–∏ –∑–∞–¥–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ–º–µ, —É–¥–æ–±—Å—Ç–≤–∞—Ö, —Ç–µ—Ö–Ω–∏–∫–µ.
    –í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∞—Å –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã:
    {', '.join(FAQ.keys())}
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö, –Ω–∞–ø–∏—à–∏ —Ç–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω ‚Äì –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å".
    –í–æ–ø—Ä–æ—Å –≥–æ—Å—Ç—è: {user_text}
    """
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content.strip().lower()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≥–æ—Å—Ç–µ–π (–µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞)
@dp.message()
async def handle_message(message: Message):
    if not message.text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print(f"‚ö† –ë–æ—Ç –ø–æ–ª—É—á–∏–ª –ù–ï —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–∏–ø: {message.content_type})")
        return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç

    user_text = message.text.strip().lower()
    user_id = message.from_user.id
    print(f"üì© –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID {user_id}): {user_text}")

    matched_question = await process_question_with_gpt(user_text)

    if matched_question in FAQ:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç: '{matched_question}'")
        await message.answer(FAQ[matched_question])
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å: '{user_text}', –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É")

        sent_message = await bot.send_message(
            GROUP_CHAT_ID,
            f"üì© <b>–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –≥–æ—Å—Ç—è:</b>\n‚ùì {user_text}\nüë§ <b>ID –≥–æ—Å—Ç—è:</b> {user_id}\n\n‚úç –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ—Å—Ç—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            parse_mode="HTML"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å: ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ ‚Üí ID –≥–æ—Å—Ç—è
        pending_questions[sent_message.message_id] = user_id

        await message.answer("–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å, –Ω–æ –º–æ–≥—É —É—Ç–æ—á–Ω–∏—Ç—å —É —Ö–æ–∑—è–∏–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ (–æ–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç —á–µ—Ä–µ–∑ "–û—Ç–≤–µ—Ç–∏—Ç—å")
@dp.message()
async def handle_group_reply(message: Message):
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: '{message.text}' (Chat ID: {message.chat.id}, Message ID: {message.message_id})")

    if message.chat.id == GROUP_CHAT_ID:
        print("‚úÖ –ë–æ—Ç –≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ!")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not message.reply_to_message:
            print("‚ö† –ë–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            await message.reply("‚ö† –û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –±–æ—Ç –ø–æ–Ω—è–ª, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
            return

        # –ü–æ–ª—É—á–∞–µ–º ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º
        original_message_id = message.reply_to_message.message_id
        print(f"üìù –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {original_message_id}")

        if original_message_id in pending_questions:
            guest_id = pending_questions.pop(original_message_id)
            response_text = message.text.strip()

            if not response_text:
                print("‚ö† –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
                await message.reply("‚ö† –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ—Å—Ç—é.")
                return

            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≥–æ—Å—Ç—é (ID {guest_id}): '{response_text}'")
            await bot.send_message(guest_id, f"üí¨ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{response_text}")
            await message.reply("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–æ—Å—Ç—é!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å —Å ID {original_message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pending_questions.")
            await message.reply("‚ö† –û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–æ—Å—Ç—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
